source /root/.bashrc
echo "warmup.4GB.rcS is running"

# Retrieve dist-gem5 rank and size parameters using magic keys
MY_RANK=$(/sbin/m5 initparam dist-rank)
[ $? = 0 ] || { echo "m5 initparam failed"; exit -1; }

echo "***** Start boot script! *****"
if [ "${RUNSCRIPT_VAR_1+set}" != set ]
then
    # Signal our future self that it's safe to continue
    echo "RUNSCRIPT_VAR_1 not set! Setting it ..."
    export RUNSCRIPT_VAR_1=1
else
    if [ "$MY_RANK" == "0" ]
    then
        # We've already executed once, so we should exit
        echo "calling m5 exit!"
        /sbin/m5 exit 1
    else
        echo "Else part - RUNSCRIPT_VAR_11_TUX1 is set! So reload and execute!"
        echo "Else part - Loading new script..."
        /sbin/m5 readfile > /tmp/runscript1.sh

        # Execute the new runscript
        if [ -s /tmp/runscript1.sh ]
        then
            #/system/bin/sh /data/runscript1.sh
            echo "Else part - executing newly loaded script ...!"
            /bin/bash /tmp/runscript1.sh
        else
            echo "Else part - Script not specified."
            echo "Else part - Exiting..."
            /sbin/m5 exit 1
        fi
    fi
fi


/bin/hostname tux${MY_RANK}

# Keep MAC address assignment simple for now ...
(($MY_RANK > 97)) && { echo "(E) Rank must be less than 98"; /sbin/m5 abort; }
((MY_ADDR = MY_RANK + 2))
if (($MY_ADDR < 10))
then
    MY_ADDR_PADDED=0${MY_ADDR}
else
    MY_ADDR_PADDED=${MY_ADDR}
fi

/sbin/ifconfig eth0 hw ether 00:90:00:00:00:${MY_ADDR_PADDED} 10.0.0.${MY_ADDR} 
/sbin/ifconfig eth0 txqueuelen 100000
/sbin/ifconfig -a

#sed -i 's/tux0/tux${MY_RANK}/g' /root/.ssh/id_rsa.pub

echo "Hello from $MY_RANK of $MY_SIZE"
ifconfig
#cd /mutilate
#./mutilate -s 127.0.0.1 -c 16
#cd /libmemcached-1.0.15/clients
#./memaslap -s 127.0.0.1:11211 -t 1s -S 1s
pkill memcached
if [ "$MY_RANK" == "0" ]
then
    memcached -t 4 -m 4096 -u root -p 11211&
    echo "memcached server started"

    echo "starting warmup"
    # warm up memcached server
 #   ./memslap --servers=127.0.0.1:11211 --warmup --initial-load=3000 --start-from 0
 #   ./memslap --servers=127.0.0.1:11211 --warmup --initial-load=550000 --start-from 250000
 #   ./memslap --servers=127.0.0.1:11211 --warmup --initial-load=800000 --start-from 500000
 #   ./memslap --servers=127.0.0.1:11211 --warmup --initial-load=1050000 --start-from 750000
 #   ./memslap --servers=127.0.0.1:11211 --warmup --initial-load=1300000 --start-from 1000000
 #   ./memslap --servers=127.0.0.1:11211 --warmup --initial-load=1550000 --start-from 1250000
 #   ./memslap --servers=127.0.0.1:11211 --warmup --initial-load=1800000 --start-from 1500000
 #   ./memslap --servers=127.0.0.1:11211 --warmup --initial-load=2050000 --start-from 1750000
    # 1G
   sleep 1000 
   echo "finished, waiting"
#	/sbin/m5 checkpoint 1
#   cd /libmemcached-1.0.15/clients
#    ./memaslap -s 127.0.0.1:11211 -t 1s -S 1s
    # send go-ahead signal to the other nodes
#    echo "iterate through the script"

else
	cd /libmemcached-1.0.15/clients
	 ./memaslap -s 10.0.0.2:11211 -t 5s -c 4 -S 1s -B




	echo "wait for RANK0 to start memcached server"
#    cd /root/dist_sync
#    ./client.o 10.0.0.2 5000
#   cd /libmemcached-1.0.15/clients
#    ./memaslap -s 192.168.0.2:11211 
#    echo "released, let's go ahead and execute the rest"
fi

#/sbin/m5 checkpoint 1
#RUN SCRIPT:

#THIS IS WHERE EXECUTION BEGINS FROM AFTER RESTORING FROM CKPT
if [ "$RUNSCRIPT_VAR_1" -eq 1 ]
then

    # Signal our future self not to recurse infinitely
    export RUNSCRIPT_VAR_1=2
    echo "3. RUNSCRIPT_VAR_1 is $RUNSCRIPT_VAR_1"

    # Read the script for the checkpoint restored execution
    echo "Loading new script..."
    /sbin/m5 readfile > /tmp/runscript1.sh

    # Execute the new runscript
    if [ -s /tmp/runscript1.sh ]
    then
        echo "executing newly loaded script ..."
        /bin/bash /tmp/runscript1.sh

    else
        echo "Script not specified. Dropping into shell..."
    fi

fi

echo "Fell through script. Exiting..."
/sbin/m5 exit 1




